[]

原

为什么新生代内存需要有两个Survivor区

2016年05月16日 15:34:55 橙子wj 阅读数：11826 标签： jvm java 内
存 Survivor 对象
个人分类： JVM
版权声明：本文为博主原创文章，未经博主允许不得转载。 https://
blog.csdn.net/antony9118/article/details/51425581

在我的上一篇博客中，介绍了JVM堆内存的结构以及在堆中进行的GC机制
，链接是浅谈JAVA GC机制与性能优化

那么，在JVM的新生代内存中，为什么除了Eden区，还要设置两个
Survivor区？

1 为什么要有Survivor区

先不去想为什么有两个Survivor区，第一个问题是，设置Survivor区的意
义在哪里？
堆内存分类

如果没有Survivor，Eden区每进行一次Minor GC，存活的对象就会被送到
老年代。老年代很快被填满，触发Major GC（因为Major GC一般伴随着
Minor GC，也可以看做触发了Full GC）。老年代的内存空间远大于新生
代，进行一次Full GC消耗的时间比Minor GC长得多。你也许会问，执行
时间长有什么坏处？频发的Full GC消耗的时间是非常可观的，这一点会
影响大型程序的执行和响应速度，更不要说某些连接会因为超时发生连接
错误了。

好，那我们来想想在没有Survivor的情况下，有没有什么解决办法，可以
避免上述情况：

  方案   优点                    缺点
增加老年 更多存活对象才能填满老  随着老年代空间加大，一旦发生
代空间   年代。降低Full GC频率   Full GC，执行所需要的时间更长
减少老年 Full GC所需时间减少     老年代很快被存活对象填满，Full
代空间                           GC频率增加

显而易见，没有Survivor的话，上述两种解决方案都不能从根本上解决问
题。

我们可以得到第一条结论：Survivor的存在意义，就是减少被送到老年代
的对象，进而减少Full GC的发生，Survivor的预筛选保证，只有经历16
次Minor GC还能在新生代中存活的对象，才会被送到老年代。

2 为什么要设置两个Survivor区

设置两个Survivor区最大的好处就是解决了碎片化，下面我们来分析一下
。

为什么一个Survivor区不行？第一部分中，我们知道了必须设置Survivor
区。假设现在只有一个survivor区，我们来模拟一下流程：
刚刚新建的对象在Eden中，一旦Eden满了，触发一次Minor GC，Eden中的
存活对象就会被移动到Survivor区。这样继续循环下去，下一次Eden满了
的时候，问题来了，此时进行Minor GC，Eden和Survivor各有一些存活对
象，如果此时把Eden区的存活对象硬放到Survivor区，很明显这两部分对
象所占有的内存是不连续的，也就导致了内存碎片化。
我绘制了一幅图来表明这个过程。其中色块代表对象，白色框分别代表
Eden区（大）和Survivor区（小）。Eden区理所当然大一些，否则新建对
象很快就导致Eden区满，进而触发Minor GC，有悖于初衷。
一个Survivor区带来碎片化

碎片化带来的风险是极大的，严重影响JAVA程序的性能。堆空间被散布的
对象占据不连续的内存，最直接的结果就是，堆中没有足够大的连续内存
空间，接下去如果程序需要给一个内存需求很大的对象分配内存。。。画
面太美不敢看。。。这就好比我们爬山的时候，背包里所有东西紧挨着放
，最后就可能省出一块完整的空间放相机。如果每件行李之间隔一点空隙
乱放，很可能最后就要一路把相机挂在脖子上了。

那么，顺理成章的，应该建立两块Survivor区，刚刚新建的对象在Eden中
，经历一次Minor GC，Eden中的存活对象就会被移动到第一块survivor
space S0，Eden被清空；等Eden区再满了，就再触发一次Minor GC，Eden
和S0中的存活对象又会被复制送入第二块survivor space S1（这个过程
非常重要，因为这种复制算法保证了S1中来自S0和Eden两部分的存活对象
占用连续的内存空间，避免了碎片化的发生）。S0和Eden被清空，然后下
一轮S0与S1交换角色，如此循环往复。如果对象的复制次数达到16次，该
对象就会被送到老年代中。下图中每部分的意义和上一张图一样，就不加
注释了。
两块Survivor避免碎片化
上述机制最大的好处就是，整个过程中，永远有一个survivor space是空
的，另一个非空的survivor space无碎片。

那么，Survivor为什么不分更多块呢？比方说分成三个、四个、五个?显
然，如果Survivor区再细分下去，每一块的空间就会比较小，很容易导致
Survivor区满，因此，我认为两块Survivor区是经过权衡之后的最佳方案
。

说明
本人水平有限，不当之处希望各位高手指正。另外，文中的插图都是我自
己在word的smart art中绘制的，看起来不精致请见谅。
如有转载请注明出处
http://blog.csdn.net/antony9118/article/details/51425581

阅读更多
想对作者说点什么？我来说一句

新生代Eden与两个Survivor区的解释

10-27 2.3万

文章出处：http://ifeve.com/jvm-yong-generation/ 聊聊JVM的年轻代
1.为什么会有年轻代我们先来屡屡，为什么需要把堆分代？不分代不能完
成他所做的事情么？其实... 来自： lojze_ly的博客

JVM为什么有1个Eden区和2个Survivor区

03-20 529

本文转载自：http://blog.csdn.net/antony9118/article/details/
51425581 如需转载自请注明出处，尊重博主的劳动成果。Eden和
Survivor的比例... 来自：爱吃花椰菜的驴小毛的博客

JVM内存区域详解（Eden Space、Survivor Space、Old Gen、Code Cache
和Perm Gen）

09-19 2.3万

JVM区域总体分两类，heap区和非heap区。 heap区又分为： - Eden
Space（伊甸园）、 - Survivor Space(幸存者区)、 - Old Gen（老年代
）... 来自：施勇

jvm中的新生代Eden和survivor区

08-30 1.4万

聊聊JVM的年轻代 1.为什么会有年轻代我们先来屡屡，为什么需要把堆分
代？不分代不能完成他所做的事情么？其实不分代完全可以，分代的唯一
理由就是优化GC性能。你先想想，如果没有分代，那我们所有的... 来自
：每天进步一点点。。。

JVM学习笔记二：垃圾收集的过程分析Eden->Survivor->Tenured

03-11 4185

内存申请过程 JVM会试图为相关Java对象在Eden中初始化一块内存区域；
当Eden空间足够时，内存申请结束。否则到下一步； JVM试图释放在Eden
中所有不活跃的对象（minor ... 来自：不忘初心

Eden&Survivor

06-10 1802

1.为什么会有年轻代我们先来屡屡，为什么需要把堆分代？不分代不能完
成他所做的事情么？其实不分代完全可以，分代的唯一理由就是优化GC性
能。你先想想，如果没有分代，那我们所有的对象都在一块，GC的... 来
自： paul_wei2008的专栏

如何计算Eden区的大小

03-24 3375

如何计算Eden区的大小题目已知虚拟机的一些参数设置如下： -Xms：1G
； -Xmx：2G； -Xmn：500M； -XX:MaxPermSize：64M... 来自： 
Decorator2015的博客

垃圾回收算法——复制算法以及eden和survivor

08-05 978

复制（Copying）算法说到底也是为了解决标记-清除算法产生的那些碎片
。首先将内存分为大小相等的两部分（假设A、B两部分），每次呢只使用
其中的一部分（这里我们假设为A区），等这部分用完了，这... 来自： 
ustcyy91的博客

JVM内存区域划分Eden Space、Survivor Space...解释以及jvm内存回收
过程

03-20 1164

jvm区域总体分两类，heap区和非heap区。heap区又分：Eden Space（伊
甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代-养老区）。
非heap区又分：... 来自：云y的博客

JVM内存区域划分Eden Space、Survivor Space、Tenured Gen，Perm Gen
解释

12-10 312

jvm区域总体分两类，heap区和非heap区。heap区又分：Eden Space（伊
甸园）、Survivor Space(幸存者区)、Tenured Gen（老年代-养老区）。
非heap区又分：...

文章热词

java 读取写入txt java中事务回滚 java调用环信 java 面试网络通信 
java局部变量的回收

相关热词

gbdt为什么为什么lspci 为什么java 为什么梯度为什么解耦

博主推荐

换一批
[feedLoadin]

没有更多推荐了，返回首页

[3_antony91]

橙子wj

关注

原创
    62

粉丝
    139

喜欢
    140

评论
    94

等级：
     

访问：
    40万+

积分：
    3735

排名：
    1万+

勋章：

专栏达人

授予成功创建个人博客专栏的用户。专栏中添加五篇以上博文即可点亮！
撰写博客专栏浓缩技术精华，专栏达人就是你！

持之以恒

授予每个自然月内发布4篇或4篇以上原创或翻译IT博文的用户。不积跬步
无以至千里，不积小流无以成江海，程序人生的精彩需要坚持不懈地积累
！

最新文章

  • java对象转成byte数组的三种方法
  • 一站式分布式缓存解决方案codisX
  • 大型网站系统与Java中间件实践
  • 详解tomcat的连接数与线程池
  • Java消息队列任务的平滑关闭

博主专栏

  • [120]

    Codis源码解析

    阅读量：2132117 篇

个人分类

  • 并发 20篇
  • JVM 8篇
  • IDEA 7篇
  • 框架 8篇
  • 其它 12篇
  • code 3篇
  • js 6篇
  • 网络 18篇
  • 分布式 9篇
  • linux 3篇
  • Go 6篇
  • codis 17篇
  • spark 1篇
  • 数据库 3篇

展开

归档

  • 2018年6月 1篇
  • 2018年4月 1篇
  • 2018年1月 1篇
  • 2017年11月 3篇
  • 2017年10月 4篇
  • 2017年9月 8篇
  • 2017年8月 8篇
  • 2017年7月 9篇
  • 2017年6月 4篇
  • 2017年5月 6篇
  • 2017年4月 19篇
  • 2017年3月 7篇
  • 2017年1月 10篇
  • 2016年12月 4篇
  • 2016年11月 5篇
  • 2016年10月 4篇
  • 2016年9月 8篇
  • 2016年8月 3篇
  • 2016年7月 2篇
  • 2016年6月 2篇
  • 2016年5月 8篇

展开

热门文章

  • JSON.parseObject 和 JSON.toJSONString 实例

    阅读量：75282

  • Intellij Idea 创建Web项目并部署servlet

    阅读量：31217

  • 团队合作开发git冲突解决方案 Intellij IDEA

    阅读量：19495

  • BootStrap+Hbuilder 实例

    阅读量：18931

  • layer 实现弹窗提交信息

    阅读量：14808

最新评论

  • navicat无法连接阿里云mys...

    snow_China：除了set global validate_password_policy=0;还要
    set glo...

  • JSON.parseObject ...

    n950814abc：感谢博主分享，很有用

  • BootStrap+Hbuilde...

    zuoside__lord：谢谢

  • navicat无法连接阿里云mys...

    wjf1997：无法连接阿里云mysql

  • Intellij Idea 创建W...

    jianbagengmu：请你写博客别暴力拼接 ,10开始之后配置 servlet
    就是步骤缺失

开发者调查
AI开发者大会日程曝光
告别知识焦虑，即刻启程
登录
注册

  • 点赞取消点赞
   
    30
   
  • 评论

    25

  • 目录
  • 收藏
  •  手机看
  • 上一篇
  • 下一篇
  • 
    [2016080217]
  • 更多
      □ 上一篇
      □ 下一篇

