反光的小鱼儿


随笔 - 208  文章 - 0  评论 - 0 
博客园  首页  新随笔  联系  管理  订阅 订阅

synchronized和ReentrantLock的区别

转载:http://houlinyan.iteye.com/blog/1112535

1、ReentrantLock 拥有Synchronized相同的并发性和内存语义，此外还多了锁投票，定时
锁等候和中断锁等候

     线程A和B都要获取对象O的锁定，假设A获取了对象O锁，B将等待A释放对O的锁定，

     如果使用 synchronized ，如果A不释放，B将一直等下去，不能被中断

     如果使用ReentrantLock，如果A不释放，可以使B在等待了足够长的时间以后，中断
等待，而干别的事情

 

    ReentrantLock获取锁定与三种方式：
    a)  lock(), 如果获取了锁立即返回，如果别的线程持有锁，当前线程则一直处于休
眠状态，直到获取锁

    b) tryLock(), 如果获取了锁立即返回true，如果别的线程正持有锁，立即返回false
；

    c)tryLock(long timeout,TimeUnit unit)，   如果获取了锁定立即返回true，如果
别的线程正持有锁，会等待参数给定的时间，在等待的过程中，如果获取了锁定，就返回
true，如果等待超时，返回false；

    d) lockInterruptibly:如果获取了锁定立即返回，如果没有获取锁定，当前线程处于
休眠状态，直到或者锁定，或者当前线程被别的线程中断

 

2、synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的
锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用Lock则不行，lock是通
过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中

 

3、在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在资
源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能
维持常态；

 

 

下面内容是转载 http://zzhonghe.iteye.com/blog/826162

 

5.0的多线程任务包对于同步的性能方面有了很大的改进，在原有synchronized关键字的基
础上，又增加了ReentrantLock，以及各种Atomic类。了解其性能的优劣程度，有助与我们
在特定的情形下做出正确的选择。 

总体的结论先摆出来：  

synchronized： 
在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原
因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用
过5.0多线程包的程序员都能理解。 

ReentrantLock: 
ReentrantLock提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（
synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比
synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好
几十倍。而ReentrantLock确还能维持常态。 

Atomic: 
和上面的类似，不激烈情况下，性能比synchronized略逊，而激烈的时候，也能维持常态
。激烈的时候，Atomic的性能会优于ReentrantLock一倍左右。但是其有一个缺点，就是只
能同步一个值，一段代码中只能出现一个Atomic的变量，多于一个同步无效。因为他不能
在多个Atomic之间同步。 


所以，我们写同步的时候，优先考虑synchronized，如果有特殊需要，再进一步优化。
ReentrantLock和Atomic如果用的不好，不仅不能提高性能，还可能带来灾难。

posted on 2016-03-23 23:22 反光的小鱼儿阅读(...) 评论(...) 编辑收藏
刷新评论刷新页面返回顶部

公告

Copyright ©2018 反光的小鱼儿
