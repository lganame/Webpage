[]

转

线程池的原理及实现

2013年05月28日 17:50:44 Hsuxu 阅读数：188174
个人分类： Java

1、线程池简介：
    多线程技术主要解决处理器单元内多个线程执行的问题，它可以显著减少处理器单元
的闲置时间，增加处理器单元的吞吐能力。   
    假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务
的时间，T3 销毁线程时间。

    如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。
                一个线程池包括以下四个基本组成部分：
                1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括创建线
程池，销毁线程池，添加新任务；
                2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状
态，可以循环的执行任务；
                3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任
务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；
                4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲
机制。
               
    线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。
它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在
服务器程序处理客户请求时，不会有T1，T3的开销了。
    线程池不仅调整T1,T3产生的时间段，而且它还显著减少了创建线程的数目，看一个例
子：
    假设一个服务器一天要处理50000个请求，并且每个请求需要一个单独的线程完成。在
线程池中，线程数一般是固定的，所以产生线程总数不会超过线程池中线程的数目，而如
果服务器不利用线程池来处理这些请求则线程总数为50000。一般线程池大小是远小于
50000。所以利用线程池的服务器程序不会为了创建50000而在处理请求时浪费时间，从而
提高效率。

    代码实现中并没有实现任务接口，而是把Runnable对象加入到线程池管理器（
ThreadPool），然后剩下的事情就由线程池管理器（ThreadPool）来完成了

 

[java] view plaincopy

 1. package mine.util.thread;  
 2.   
 3. import java.util.LinkedList;  
 4. import java.util.List;  
 5.   
 6. /** 
 7.  * 线程池类，线程管理器：创建线程，执行任务，销毁线程，获取线程基本信息 
 8.  */  
 9. public final class ThreadPool {  
10.     // 线程池中默认线程的个数为5  
11.     private static int worker_num = 5;  
12.     // 工作线程  
13.     private WorkThread[] workThrads;  
14.     // 未处理的任务  
15.     private static volatile int finished_task = 0;  
16.     // 任务队列，作为一个缓冲,List线程不安全  
17.     private List<Runnable> taskQueue = new LinkedList<Runnable>();  
18.     private static ThreadPool threadPool;  
19.   
20.     // 创建具有默认线程个数的线程池  
21.     private ThreadPool() {  
22.         this(5);  
23.     }  
24.   
25.     // 创建线程池,worker_num为线程池中工作线程的个数  
26.     private ThreadPool(int worker_num) {  
27.         ThreadPool.worker_num = worker_num;  
28.         workThrads = new WorkThread[worker_num];  
29.         for (int i = 0; i < worker_num; i++) {  
30.             workThrads[i] = new WorkThread();  
31.             workThrads[i].start();// 开启线程池中的线程  
32.         }  
33.     }  
34.   
35.     // 单态模式，获得一个默认线程个数的线程池  
36.     public static ThreadPool getThreadPool() {  
37.         return getThreadPool(ThreadPool.worker_num);  
38.     }  
39.   
40.     // 单态模式，获得一个指定线程个数的线程池,worker_num(>0)为线程池中工作
    线程的个数  
41.     // worker_num<=0创建默认的工作线程个数  
42.     public static ThreadPool getThreadPool(int worker_num1) {  
43.         if (worker_num1 <= 0)  
44.             worker_num1 = ThreadPool.worker_num;  
45.         if (threadPool == null)  
46.             threadPool = new ThreadPool(worker_num1);  
47.         return threadPool;  
48.     }  
49.   
50.     // 执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器觉定
      
51.     public void execute(Runnable task) {  
52.         synchronized (taskQueue) {  
53.             taskQueue.add(task);  
54.             taskQueue.notify();  
55.         }  
56.     }  
57.   
58.     // 批量执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器
    觉定  
59.     public void execute(Runnable[] task) {  
60.         synchronized (taskQueue) {  
61.             for (Runnable t : task)  
62.                 taskQueue.add(t);  
63.             taskQueue.notify();  
64.         }  
65.     }  
66.   
67.     // 批量执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器
    觉定  
68.     public void execute(List<Runnable> task) {  
69.         synchronized (taskQueue) {  
70.             for (Runnable t : task)  
71.                 taskQueue.add(t);  
72.             taskQueue.notify();  
73.         }  
74.     }  
75.   
76.     // 销毁线程池,该方法保证在所有任务都完成的情况下才销毁所有线程，否则等
    待任务完成才销毁  
77.     public void destroy() {  
78.         while (!taskQueue.isEmpty()) {// 如果还有任务没执行完成，就先睡会吧
      
79.             try {  
80.                 Thread.sleep(10);  
81.             } catch (InterruptedException e) {  
82.                 e.printStackTrace();  
83.             }  
84.         }  
85.         // 工作线程停止工作，且置为null  
86.         for (int i = 0; i < worker_num; i++) {  
87.             workThrads[i].stopWorker();  
88.             workThrads[i] = null;  
89.         }  
90.         threadPool=null;  
91.         taskQueue.clear();// 清空任务队列  
92.     }  
93.   
94.     // 返回工作线程的个数  
95.     public int getWorkThreadNumber() {  
96.         return worker_num;  
97.     }  
98.   
99.     // 返回已完成任务的个数,这里的已完成是只出了任务队列的任务个数，可能该
    任务并没有实际执行完成  
100.     public int getFinishedTasknumber() {  
101.         return finished_task;  
102.     }  
103.   
104.     // 返回任务队列的长度，即还没处理的任务个数  
105.     public int getWaitTasknumber() {  
106.         return taskQueue.size();  
107.     }  
108.   
109.     // 覆盖toString方法，返回线程池信息：工作线程个数和已完成任务个数  
110.     @Override  
111.     public String toString() {  
112.         return "WorkThread number:" + worker_num + 
    "  finished task number:"  
113.                 + finished_task + "  wait task number:"
     + getWaitTasknumber();  
114.     }  
115.   
116.     /** 
117.      * 内部类，工作线程 
118.      */  
119.     private class WorkThread extends Thread {  
120.         // 该工作线程是否有效，用于结束该工作线程  
121.         private boolean isRunning = true;  
122.   
123.         /* 
124.          * 关键所在啊，如果任务队列不空，则取出任务执行，若任务队列空，则
    等待 
125.          */  
126.         @Override  
127.         public void run() {  
128.             Runnable r = null;  
129.             while (isRunning) {// 注意，若线程无效则自然结束run方法，该线
    程就没用了  
130.                 synchronized (taskQueue) {  
131.                     while (isRunning && taskQueue.isEmpty()) {// 队列为空
      
132.                         try {  
133.                             taskQueue.wait(20);  
134.                         } catch (InterruptedException e) {  
135.                             e.printStackTrace();  
136.                         }  
137.                     }  
138.                     if (!taskQueue.isEmpty())  
139.                         r = taskQueue.remove(0);// 取出任务  
140.                 }  
141.                 if (r != null) {  
142.                     r.run();// 执行任务  
143.                 }  
144.                 finished_task++;  
145.                 r = null;  
146.             }  
147.         }  
148.   
149.         // 停止工作，让该线程自然执行完run方法，自然结束  
150.         public void stopWorker() {  
151.             isRunning = false;  
152.         }  
153.     }  
154. }  

 

测试代码：

[java] view plaincopy

 1. package mine.util.thread;  
 2.   
 3. //测试线程池  
 4. public class TestThreadPool {  
 5.     public static void main(String[] args) {  
 6.         // 创建3个线程的线程池  
 7.         ThreadPool t = ThreadPool.getThreadPool(3);  
 8.         t.execute(new Runnable[] { new Task(), new Task(), new Task() });  
 9.         t.execute(new Runnable[] { new Task(), new Task(), new Task() });  
10.         System.out.println(t);  
11.         t.destroy();// 所有线程都执行完成才destory  
12.         System.out.println(t);  
13.     }  
14.   
15.     // 任务类  
16.     static class Task implements Runnable {  
17.         private static volatile int i = 1;  
18.   
19.         @Override  
20.         public void run() {// 执行任务  
21.             System.out.println("任务 " + (i++) + " 完成");  
22.         }  
23.     }  
24. }  


 

运行结果：

WorkThread number:3  finished task number:0  wait task number:6
任务 1 完成
任务 2 完成
任务 3 完成
任务 4 完成
任务 5 完成
任务 6 完成
WorkThread number:3  finished task number:6  wait task number:0

分析：由于并没有任务接口，传入的可以是自定义的任何任务，所以线程池并不能准确的
判断该任务是否真正的已经完成（真正完成该任务是这个任务的run方法执行完毕），只能
知道该任务已经出了任务队列，正在执行或者已经完成。

2、java类库中提供的线程池简介：

     java提供的线程池更加强大，相信理解线程池的工作原理，看类库中的线程池就不会
感到陌生了。

[0_13197842]

[0_13197842]

阅读更多登录后自动展开
想对作者说点什么？我来说一句
 

线程池原理(讲的非常棒)

gol_phing gol_phing

10-10 2.7万

Java并发编程：线程池的使用　　在前面的文章中，我们使用线程的时候就去创建一个线
程，这样实现起来非常简便，但是就会有一个问题：　　如果并发的线程数量很多，并且
每个线程都是执行一个时间...

 

深入理解线程和线程池（图文详解）

weixin_40271838 weixin_40271838

04-19 3232

关于线程和线程池的学习，我们可以从以下几个方面入手：第一，什么是线程，线程和进
程的区别是什么第二，线程中的基本概念，线程的生命周期第三，单线程和多线程第四，
线程池的原理解析第五，常见的几种线程池的特点...

 

线程池是什么？线程池的作用？

qq_33485434 qq_33485434

11-05 3510

为了更好的理解，首先来看一篇JAVA中的线程池介绍：一、简介线程池类为
java.util.concurrent.ThreadPoolExecutor，常用构造方法为： Thre...

 

java中线程池的几种实现方式

w2393040183 w2393040183

08-11 1.7万

1、线程池简介：     多线程技术主要解决处理器单元内多个线程执行的问题，它可以显
著减少处理器单元的闲置时间，增加处理器单元的吞吐能力。         假设一个服务器完
成一项任务所需时间为：T...

 

线程池，这一篇或许就够了

GarfieldEr007 GarfieldEr007

05-31 246

为什么用线程池创建/销毁线程伴随着系统开销，过于频繁的创建/销毁线程，会很大程度
上影响处理效率例如：记创建线程消耗时间T1，执行任务消耗时间T2，销毁线程消耗时间
T3如果T1+T3&amp;gt;T2...

 

Java线程池实现原理与源码解析(jdk1.8)

programmer_at programmer_at

04-03 1213

为什么需要线程池？线程池能够对线程进行统一分配，调优和监控： - 降低资源消耗（线
程无限制地创建，然后使用完毕后销毁） - 提高响应速度（无须创建线程） - 提高线程
的可管理性 Java是...

 

理解线程池的原理

mine_song mine_song

04-29 2万

理解线程池的原理

 

常见的四种线程池和区别

qq_34952110 qq_34952110

09-25 2.7万

线程池主要解决处理器单元内多个线程执行的问题，能够有效的降低频繁创建和销毁线程
所带来的开销。下面简单的介绍一下各个的区别和用处。（1）fixThreadPool          
我的理解这是一个...

 

线程池工作机制与原理

wxq544483342 wxq544483342

11-10 3483

书接上文，Java线程池。接下来记录一下线程池的工作机制和原理线程池的两个核心队列
： - 线程等待池，即线程队列BlockingQueue。 - 任务处理池（PoolWorker），即正在工
作...

 

Java-线程池专题（什么是线程池，如何使用，为什么要用）

wolf909867753 wolf909867753

08-23 9066

1、什么是线程池：  java.util.concurrent.Executors提供了一个
java.util.concurrent.Executor接口的实现用于创建线程池多线程技术主要解决处理...

相关热词

线程池与线程池 was线程池 for线程池线程池核心线程池线程池
[feedLoadin]

没有更多推荐了，返回首页

个人资料

[3_hsuxu]

Hsuxu

关注

原创
    35

粉丝
    287

喜欢
    34

评论
    104

等级：
     

访问：
    64万+

积分：
    4081

排名：
    1万+

最新文章

  • 【翻译】两种高性能I/O设计模式(Reactor/Proactor)的比较
  • HotSpot VM的生命周期
  • 深入理解Java内存模型（六）——final
  • 深入理解Java内存模型（四）——volatile
  • 负载均衡的几种实现技术

个人分类

  • JavaScript 4篇
  • Linux基础知识 11篇
  • Web后台技术 8篇
  • Spring框架 3篇
  • C C++ 20篇
  • Web综合 4篇
  • 个人感想 1篇
  • 趣题 3篇
  • Java 46篇
  • 操作系统 4篇
  • windows 3篇
  • hadoop 1篇
  • Java编程思想笔记 13篇
  • Python 7篇
  • 大数据 2篇
  • 数据库技术 10篇
  • 分布式计算 1篇
  • Hibernate 10篇
  • 算法 7篇
  • Java多线程 8篇
  • 系统架构 3篇
  • Web Server 1篇
  • Rails 1篇
  • 网络 3篇
  • JVM调优 3篇
  • Unix编程 2篇
  • java性能调优系列 3篇
  • tomcat5源码分析 1篇

展开

归档

  • 2014年3月 1篇
  • 2013年9月 2篇
  • 2013年8月 4篇
  • 2013年7月 25篇
  • 2013年6月 13篇
  • 2013年5月 19篇
  • 2013年4月 5篇
  • 2013年3月 2篇
  • 2013年2月 5篇
  • 2013年1月 1篇
  • 2012年12月 1篇
  • 2012年11月 5篇
  • 2012年10月 11篇
  • 2012年9月 8篇
  • 2012年8月 7篇
  • 2012年7月 21篇
  • 2012年6月 5篇
  • 2012年5月 3篇
  • 2012年4月 16篇
  • 2012年3月 7篇
  • 2012年2月 3篇
  • 2012年1月 6篇

展开

热门文章

  • 线程池的原理及实现

    阅读量：187948

  • JAVA CAS原理深度分析

    阅读量：133963

  • JIT（动态编译）和AOT（静态编译）编译技术比较

    阅读量：24708

  • 一个简单的Java死锁示例

    阅读量：23398

  • Java NIO 选择器(Selector)的内部实现（poll epoll）

    阅读量：23048

最新评论

  • JAVA CAS原理深度分析

    sinat_29705095：[reply]zsmj_820_09[/reply] 这东西不抽象，而且重要的是上层思
    想，内部实现...

  • 一个简单的Java死锁示例

    bjq_iatbest：很不错的例子

  • 线程池的原理及实现

    qq_21892341：楼主，这个finished_task++; 是不是应该放到这里面 if (r != null)
    {...

  • 线程池的原理及实现

    qq_21892341：写的很好！

  • 线程池的原理及实现

    qq_21892341：[reply]qq_28229449[/reply] 是不可以的，去掉isRunning，若tas...

登录
注册

  • 点赞取消点赞
   
    81
   
  • 评论

    44

  • 目录
  • 收藏
  •  手机看
  • 上一篇
  • 下一篇
  • 
    [2016080217]
  • 更多
      □ 上一篇
      □ 下一篇

